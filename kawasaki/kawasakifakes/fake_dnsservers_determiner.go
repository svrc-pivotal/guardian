// This file was generated by counterfeiter
package kawasakifakes

import (
	"net"
	"sync"

	"code.cloudfoundry.org/guardian/kawasaki"
	"code.cloudfoundry.org/lager"
)

type FakeDNSServersDeterminer struct {
	DetermineStub        func(log lager.Logger, resolvFilePath string, hostIP net.IP, overridingDNSServers, additionalDNSServers []net.IP) ([]net.IP, error)
	determineMutex       sync.RWMutex
	determineArgsForCall []struct {
		log                  lager.Logger
		resolvFilePath       string
		hostIP               net.IP
		overridingDNSServers []net.IP
		additionalDNSServers []net.IP
	}
	determineReturns struct {
		result1 []net.IP
		result2 error
	}
	determineReturnsOnCall map[int]struct {
		result1 []net.IP
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDNSServersDeterminer) Determine(log lager.Logger, resolvFilePath string, hostIP net.IP, overridingDNSServers []net.IP, additionalDNSServers []net.IP) ([]net.IP, error) {
	var overridingDNSServersCopy []net.IP
	if overridingDNSServers != nil {
		overridingDNSServersCopy = make([]net.IP, len(overridingDNSServers))
		copy(overridingDNSServersCopy, overridingDNSServers)
	}
	var additionalDNSServersCopy []net.IP
	if additionalDNSServers != nil {
		additionalDNSServersCopy = make([]net.IP, len(additionalDNSServers))
		copy(additionalDNSServersCopy, additionalDNSServers)
	}
	fake.determineMutex.Lock()
	ret, specificReturn := fake.determineReturnsOnCall[len(fake.determineArgsForCall)]
	fake.determineArgsForCall = append(fake.determineArgsForCall, struct {
		log                  lager.Logger
		resolvFilePath       string
		hostIP               net.IP
		overridingDNSServers []net.IP
		additionalDNSServers []net.IP
	}{log, resolvFilePath, hostIP, overridingDNSServersCopy, additionalDNSServersCopy})
	fake.recordInvocation("Determine", []interface{}{log, resolvFilePath, hostIP, overridingDNSServersCopy, additionalDNSServersCopy})
	fake.determineMutex.Unlock()
	if fake.DetermineStub != nil {
		return fake.DetermineStub(log, resolvFilePath, hostIP, overridingDNSServers, additionalDNSServers)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.determineReturns.result1, fake.determineReturns.result2
}

func (fake *FakeDNSServersDeterminer) DetermineCallCount() int {
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	return len(fake.determineArgsForCall)
}

func (fake *FakeDNSServersDeterminer) DetermineArgsForCall(i int) (lager.Logger, string, net.IP, []net.IP, []net.IP) {
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	return fake.determineArgsForCall[i].log, fake.determineArgsForCall[i].resolvFilePath, fake.determineArgsForCall[i].hostIP, fake.determineArgsForCall[i].overridingDNSServers, fake.determineArgsForCall[i].additionalDNSServers
}

func (fake *FakeDNSServersDeterminer) DetermineReturns(result1 []net.IP, result2 error) {
	fake.DetermineStub = nil
	fake.determineReturns = struct {
		result1 []net.IP
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSServersDeterminer) DetermineReturnsOnCall(i int, result1 []net.IP, result2 error) {
	fake.DetermineStub = nil
	if fake.determineReturnsOnCall == nil {
		fake.determineReturnsOnCall = make(map[int]struct {
			result1 []net.IP
			result2 error
		})
	}
	fake.determineReturnsOnCall[i] = struct {
		result1 []net.IP
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSServersDeterminer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDNSServersDeterminer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.DNSServersDeterminer = new(FakeDNSServersDeterminer)
